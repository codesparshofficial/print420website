// ‚úÖ Firebase Import
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-auth.js";
import { getFirestore, collection, addDoc } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore.js";
import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-storage.js";

// ‚úÖ Firebase Configuration
const firebaseConfig = {
  apiKey: "AIzaSyBaDy2PoG_-KZVYoraD3tpU_C8CUvKQYQk",
  authDomain: "print420-bbf5b.firebaseapp.com",
  projectId: "print420-bbf5b",
  storageBucket: "print420-bbf5b.firebasestorage.app",
  messagingSenderId: "240976479161",
  appId: "1:240976479161:web:930be6bdf355e041df2c68",
  measurementId: "G-M0LMNP8EYK"
};

// ‚úÖ Firebase Initialize
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app); // ‚úÖ Initialize Storage




// ‚úÖ Start Loader (Common for Login & Checkout Data)



function startLoader() {



if (!document.getElementById("loadingSpinner")) {



const loader = document.createElement("div");



loader.id = "loadingSpinner";



loader.style.position = "fixed";



loader.style.top = "0";



loader.style.left = "0";



loader.style.width = "100vw";



loader.style.height = "100vh";



loader.style.background = "rgba(0, 0, 0, 0.7)";



loader.style.display = "flex";



loader.style.alignItems = "center";



loader.style.justifyContent = "center";



loader.style.zIndex = "9999";







loader.innerHTML = `



  <div style="width: 60px; height: 60px; border: 5px solid white; border-top-color: #FF0000; border-radius: 50%; animation: spin 1s linear infinite;"></div>



  <style>@keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }</style>



`;







document.body.appendChild(loader);



}



}



// ‚úÖ Stop Loader



function stopLoader() {



const loader = document.getElementById("loadingSpinner");



if (loader) {



loader.remove();



}



}



// ‚úÖ Check Authentication + Load Checkout Data with Loader



startLoader(); // ‚úÖ Loader Start before everything



onAuthStateChanged(auth, (user) => {



if (!user) {



alert("‚ö† Please login to continue checkout.");



sessionStorage.setItem("redirectAfterLogin", window.location.href);



window.location.href = "login.html";



} else {



document.getElementById("userEmail").textContent = user.email;



document.getElementById("userEmail").style.display = "inline-block";



loadCheckoutData();



}



});



// ‚úÖ Load Order Details from sessionStorage



function loadCheckoutData() {



setTimeout(() => { // ‚úÖ Smooth Transition ke liye Delay



const orderDetails = JSON.parse(sessionStorage.getItem("orderDetails"));







if (!orderDetails) {



  alert("‚ö† No order details found! Redirecting to home.");



  window.location.href = "index.html";



  return;



}







document.getElementById("orderName").textContent = orderDetails.name;



document.getElementById("orderPrice").textContent = orderDetails.price;



document.getElementById("orderType").textContent = `Product Type: ${orderDetails.type}`;







document.getElementById("orderImage1").src = orderDetails.image1 || "https://via.placeholder.com/200";



document.getElementById("orderImage2").src = orderDetails.image2 || "https://via.placeholder.com/200";







if (orderDetails.image2) {



  document.getElementById("orderImage2").style.display = "block";



}







document.getElementById("fullName").textContent = orderDetails.fullName;



document.getElementById("address").textContent = orderDetails.address;



document.getElementById("city").textContent = orderDetails.city;



document.getElementById("state").textContent = orderDetails.state;



document.getElementById("pincode").textContent = orderDetails.pincode;



document.getElementById("mobile").textContent = orderDetails.mobile;







stopLoader(); // ‚úÖ Loader Stop jab sab kuch load ho jaye



}, 1000);



}



// ‚úÖ Payment Integration with Razorpay



document.getElementById("placeOrderBtn").addEventListener("click", function() {



const orderDetails = JSON.parse(sessionStorage.getItem("orderDetails"));



const userEmail = auth.currentUser ? auth.currentUser.email : "guest@example.com";



if (!orderDetails) {



alert("‚ùå Error: Order details missing.");



return;



}



const options = {



key: "rzp_test_NfDhAFYplEhZEf",



amount: parseInt(orderDetails.price.replace("‚Çπ", "")) * 100,



currency: "INR",



name: "Print 420",



description: orderDetails.name,



image: "https://codesparshofficial.github.io/Print420/img12.png",



handler: async function(response) {



  if (!response.razorpay_payment_id) {



    alert("‚ùå Payment failed! Order not placed.");



    return;



  }







  showLoader(); // ‚úÖ Show loader before Firebase save







  const paymentData = {



    paymentId: response.razorpay_payment_id,



    paymentStatus: "Paid",



    orderDetails: orderDetails



  };







  sessionStorage.setItem("paymentDetails", JSON.stringify(paymentData));







  await saveOrderToFirebase({



    ...orderDetails,



    email: userEmail,



    paymentId: response.razorpay_payment_id,



    paymentStatus: "Paid"



  });



},



prefill: {



  name: orderDetails.fullName,



  email: userEmail,



  contact: orderDetails.mobile



},



theme: { color: "#FFB3B3" },



modal: { ondismiss: function() { alert("‚ö† Payment was cancelled. Please try again."); } }



};



const rzp1 = new Razorpay(options);



rzp1.open();



});



// ‚úÖ Show Loader Function (100% Working)



function showLoader() {



if (!document.getElementById("loadingSpinner")) {



const loader = document.createElement("div");



loader.id = "loadingSpinner";



loader.style.position = "fixed";



loader.style.top = "0";



loader.style.left = "0";



loader.style.width = "100vw";



loader.style.height = "100vh";



loader.style.background = "rgba(0, 0, 0, 0.7)";



loader.style.display = "flex";



loader.style.alignItems = "center";



loader.style.justifyContent = "center";



loader.style.zIndex = "9999";







loader.innerHTML = `



  <div style="width: 60px; height: 60px; border: 5px solid white; border-top-color: #FF0000; border-radius: 50%; animation: spin 1s linear infinite;"></div>



  <style>@keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }</style>



`;







document.body.appendChild(loader);



console.log("‚úÖ Loader Added");



}



}



// ‚úÖ Hide Loader Function



function hideLoader() {



const loader = document.getElementById("loadingSpinner");



if (loader) {



loader.remove();



console.log("‚úÖ Loader Removed");



}



}




    // ‚úÖ ‡§á‡§Æ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® (Firebase Storage)
async function uploadImageToStorage(imageData, userId, imageName) {
  try {
    console.log("üì§ ‡§á‡§Æ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à:", imageName);
    let blob;

    if (imageData instanceof File) {
      blob = imageData;
    } else if (imageData.startsWith('data:image')) {
      const response = await fetch(imageData);
      blob = await response.blob();
    } else if (imageData.startsWith('http')) {
      const response = await fetch(imageData);
      blob = await response.blob();
    } else {
      throw new Error("‚ùå ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§á‡§Æ‡•á‡§ú ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü");
    }

    const storagePath = `users/${userId}/orders/${Date.now()}_${imageName}`;
    const storageRef = ref(storage, storagePath);
    
    // ‡§á‡§Æ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡•á‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç
    const uploadTask = uploadBytesResumable(storageRef, blob);

    uploadTask.on("state_changed",
      (snapshot) => {
        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
        console.log(`‚è≥ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§™‡•ç‡§∞‡§ó‡§§‡§ø: ${progress.toFixed(2)}%`);
      },
      (error) => {
        console.error("‚ùå ‡§á‡§Æ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§µ‡§ø‡§´‡§≤:", error);
        throw error;
      }
    );

    await uploadTask;
    
    console.log("‚úÖ ‡§á‡§Æ‡•á‡§ú ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•Å‡§à:", imageName);
    return await getDownloadURL(storageRef);  // ‚úÖ Return ‡§∏‡§ø‡§∞‡•ç‡§´ Image URL

  } catch (error) {
    console.error("‚ùå ‡§á‡§Æ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:", error.message);
    return null;  // ‡§Ö‡§ó‡§∞ ‡§á‡§Æ‡•á‡§ú ‡§Ö‡§™‡§≤‡•ã‡§° ‡§´‡•á‡§≤ ‡§π‡•ã ‡§ú‡§æ‡§è, ‡§§‡•ã null ‡§µ‡§æ‡§™‡§∏ ‡§ï‡§∞‡•á‡§Ç
  }
}

// ‚úÖ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® (Firestore ‡§Æ‡•á‡§Ç ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§á‡§Æ‡•á‡§ú URL Save ‡§π‡•ã‡§ó‡§æ)
async function saveOrderToFirebase(orderDetails) {
  try {
    startLoader();
    
    const user = auth.currentUser;
    if (!user) throw new Error("‚ùå ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç");

    console.log("üìù ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡•Å‡§∞‡•Ç...");

    const imageUrls = {};

    // ‡§á‡§Æ‡•á‡§ú 1 ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
    if (orderDetails.image1) {
      const url = await uploadImageToStorage(orderDetails.image1, user.uid, "design1");
      if (url) imageUrls.image1 = url;
    }

    // ‡§á‡§Æ‡•á‡§ú 2 ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
    if (orderDetails.image2) {
      const url = await uploadImageToStorage(orderDetails.image2, user.uid, "design2");
      if (url) imageUrls.image2 = url;
    }

    // Firestore ‡§Æ‡•á‡§Ç ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§°‡•á‡§ü‡§æ ‡§î‡§∞ ‡§á‡§Æ‡•á‡§ú URL ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
    const orderData = {
      uid: user.uid,
      productName: orderDetails.productName,
      size: orderDetails.size,
      color: orderDetails.paymentId,
      price: orderDetails.price,
      imageUrls,  // ‚úÖ ‡§∏‡§ø‡§∞‡•ç‡§´ URL ‡§∏‡•á‡§µ ‡§π‡•ã‡§ó‡§æ
      timestamp: new Date().toISOString()
    };

    const docRef = await addDoc(collection(db, "orders"), orderData);
    
    console.log("‚úÖ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï Firestore ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! Order ID:", docRef.id);
    window.location.href = "/order-success.html";

  } catch (error) {
    console.error("‚ùå ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:", error.message);
    alert(`‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ${error.message}`);
  } finally {
    stopLoader();
  }
                                                  }
                             

// ‚úÖ Retrieve Payment Details



function getPaymentDetails() {



const paymentData = JSON.parse(sessionStorage.getItem("paymentDetails"));



if (paymentData) {



console.log("‚úÖ Payment Data Retrieved:", paymentData);



return paymentData;



} else {



console.log("‚ùå No Payment Data Found.");



return null;



}



}



                   

  
